<%= simple_form_for [@house], html: { autocomplete: 'off' } do |f| %>

  <div class="step" id="step_1">
    <h4>Désignation du bien</h4>
    <div class="row no-padded space-row">
      <div class="adreess-bien col-xs-12">
        <%= f.input :address, label: 'Adresse du bien', input_html: { class: 'small-field'}, label_html: { class: 'big-label' }%>
      </div>
      <div class="type-bien col-xs-12">
        <%= f.input :house_type, label: "Type du bien", collection: %w(Appartement Maison Garage), as: :radio_buttons %>
      </div>
      <div class="usage-bien col-xs-12">
        <%= f.input :usage_type, label: "Bien à usage", collection: %w(Domestique Profesionnel Mixte), as: :radio_buttons %>
      </div>
    </div>
     <div class="button-next btn-inline" id="button-1">Continuer</div>
  </div>

    <div class="step" id="step_2" style="display: none;" >
      <h4>Propriétaires</h4>
        <%= f.simple_fields_for :owner do |o| %>
          <div class="row no-padded space-row" id="owner-data" data-owners="<%= @owners.to_json %>">
            <div class="col-xs-6 no-padded autocomplete">
              <%= o.input :last_name, label: 'Nom', input_html: { class: 'small-field'}, label_html: { class: 'big-label' }%>
            </div>
            <div class="col-xs-6 no-padded">
              <%= o.input :first_name, label: 'Prénom', input_html: { class: 'small-field'}, label_html: { class: 'big-label' }%>
            </div>
            <div class="col-xs-12 no-padded">
              <%= o.input :address, label: 'Adresse', input_html: { class: 'small-field'}, label_html: { class: 'big-label' }%>
            </div>
            <div class="col-xs-6 no-padded">
              <%= o.input :email, label: 'email', input_html: { class: 'small-field'}, label_html: { class: 'big-label' }%>
            </div>
            <div class="col-xs-6 no-padded">
              <%= o.input :phone_number, label: 'Téléphone', input_html: { class: 'small-field'}, label_html: { class: 'big-label' }%>
            </div>
          </div>
        <% end %>
        <div class="button-back btn-inline" id="button-back-2">Retour</div>
        <div class="button-next btn-inline" id="button-2">Continuer</div>
    </div>

  <div class="step" id="step_3" style="display: none;" >
      <h4>Intérieur du bien</h4>
      <div class="row">
        <%= f.input :surface_living, label: 'Surface habitable d environ' %>
      </div>
      <div class="row no-padded">
        <div class="col-xs-3">
          <%= f.input :nb_rooms, label: 'Nombre de pièces'%>
        </div>
        <div class="col-xs-3">
          <%= f.input :nb_bedrooms, label: 'Chambre'%>
        </div>
        <div class="col-xs-3">
          <%= f.input :nb_livingrooms, label: 'Séjour'%>
        </div>
        <div class="col-xs-3">
          <%= f.input :nb_diningrooms, label: 'Cuisine'%>
        </div>
      </div>
      <%= f.input :equiped_kitchen, label: 'Cuisine équipée'%>
      <div class="switch">
        <label>
          Non
          <input type="checkbox">
          <span class="lever"></span>
          Oui
        </label>
      </div>

      <h4>Extérieur du bien</h4>
      <div class="col-xs-4">
        <%= f.input :construction_date, label: 'Année de construction'%>
      </div>
      <div class="col-xs-4">
        <%= f.input :surface_total, label: 'Surface du terrain'%>
      </div>
      <div class="col-xs-4">
        <%= f.input :nb_balconies, label: 'Balcon'%>
      </div>
      <div class="button-back btn-inline" id="button-back-3">Retour</div>
      <div class="button-next btn-inline" id="button-3">Continuer</div>
  </div>

  <div class="step" id="step_4" style="display: none;" >
    <h4>Aspects financiers</h4>
    <div class="col-xs-6">
      <%= f.input :price, label: 'Prix TTC'%>
    </div>
    <div class="col-xs-6">
      <%= f.input :net_price_seller, label: 'Prix net vendeur'%>
    </div>
    <div class="col-xs-6">
      <%= f.input :agence_fee, label: 'Honoraires TTC'%>
    </div>
    <div class="col-xs-6">
      <%= f.input :annual_charges, label: 'Charges'%>
    </div>
    <div class="button-back btn-inline" id="button-back-4">Retour</div>
    <%= f.submit 'Créer le bien', class: "btn btn-primary btn-inline" %>
  </div>


<% end %>

<div class="step-route row">
  <!-- <h5>Etape <span id="step_count">1</span> sur 3</h5> -->
  <div class="boxContainer">
    <div class="boxItem text-center item-circle step-active"></div>
    <div class="boxItem text-center item-circle"></div>
    <div class="boxItem text-center item-circle"></div>
    <div class="boxItem text-center item-circle"></div>
    </div>
</div>


<script>

  document.addEventListener("DOMContentLoaded", function() {
    var flatAddress = document.getElementById('house_address');

    if (flatAddress) {
      var autocomplete = new google.maps.places.Autocomplete(flatAddress, { types: [ 'geocode' ] });
      google.maps.event.addDomListener(flatAddress, 'keydown', function(e) {
        if (e.key === "Enter") {
          // e.preventDefault(); // Do not submit the form on Enter.
        }
      });
    }
  });

  const ownerElement = document.getElementById('owner-data');
  const ownerData = JSON.parse(ownerElement.dataset.owners);
  const lastNamesOwners = ownerData.map( x => x.last_name);

  function autocomplete(inp, arr) {
    /*the autocomplete function takes two arguments,
    the text field element and an array of possible autocompleted values:*/
    var currentFocus;
    /*execute a function when someone writes in the text field:*/
    inp.addEventListener("input", function(e) {
        var a, b, i, val = this.value;
        /*close any already open lists of autocompleted values*/
        closeAllLists();
        if (!val) { return false;}
        currentFocus = -1;
        /*create a DIV element that will contain the items (values):*/
        a = document.createElement("DIV");
        a.setAttribute("id", this.id + "autocomplete-list");
        a.setAttribute("class", "autocomplete-items");
        /*append the DIV element as a child of the autocomplete container:*/
        this.parentNode.appendChild(a);
        /*for each item in the array...*/
        for (i = 0; i < arr.length; i++) {
          /*check if the item starts with the same letters as the text field value:*/
          if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
            /*create a DIV element for each matching element:*/
            b = document.createElement("DIV");
            /*make the matching letters bold:*/
            b.className = "autocomplete-choices"
            b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
            b.innerHTML += arr[i].substr(val.length);
            /*insert a input field that will hold the current array item's value:*/
            b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
            b.id = i;
            /*execute a function when someone clicks on the item value (DIV element):*/
                b.addEventListener("click", function(e) {
                /*insert the value for the autocomplete text field:*/
                inp.value = this.getElementsByTagName("input")[0].value;
                /*close the list of autocompleted values,
                (or any other open lists of autocompleted values:*/
                closeAllLists();
                populateOwnerDetails(e.target.id);
            });
            a.appendChild(b);
          }
        }
    });
    /*execute a function presses a key on the keyboard:*/
    inp.addEventListener("keydown", function(e) {
        var x = document.getElementById(this.id + "autocomplete-list");
        if (x) x = x.getElementsByTagName("div");
        if (e.keyCode == 40) {
          /*If the arrow DOWN key is pressed,
          increase the currentFocus variable:*/
          currentFocus++;
          /*and and make the current item more visible:*/
          addActive(x);
        } else if (e.keyCode == 38) { //up
          /*If the arrow UP key is pressed,
          decrease the currentFocus variable:*/
          currentFocus--;
          /*and and make the current item more visible:*/
          addActive(x);
        } else if (e.keyCode == 13) {
          /*If the ENTER key is pressed, prevent the form from being submitted,*/
          e.preventDefault();
          if (currentFocus > -1) {
            /*and simulate a click on the "active" item:*/
            if (x) x[currentFocus].click();
          }
        }
    });
    function populateOwnerDetails(index){
      const owner = ownerData[index];
      document.querySelector('#house_owner_first_name').value = owner.first_name;
      document.querySelector('#house_owner_address').value = owner.address;
      document.querySelector('#house_owner_email').value = owner.email;
      document.querySelector('#house_owner_phone_number').value = owner.phone_number;
    }
    function addActive(x) {
      /*a function to classify an item as "active":*/
      if (!x) return false;
      /*start by removing the "active" class on all items:*/
      removeActive(x);
      if (currentFocus >= x.length) currentFocus = 0;
      if (currentFocus < 0) currentFocus = (x.length - 1);
      /*add class "autocomplete-active":*/
      x[currentFocus].classList.add("autocomplete-active");
    }
    function removeActive(x) {
      /*a function to remove the "active" class from all autocomplete items:*/
      for (var i = 0; i < x.length; i++) {
        x[i].classList.remove("autocomplete-active");
      }
    }
    function closeAllLists(elmnt) {
      /*close all autocomplete lists in the document,
      except the one passed as an argument:*/
      var x = document.getElementsByClassName("autocomplete-items");
      for (var i = 0; i < x.length; i++) {
        if (elmnt != x[i] && elmnt != inp) {
        x[i].parentNode.removeChild(x[i]);
      }
    }
  }
  /*execute a function when someone clicks in the document:*/
  document.addEventListener("click", function (e) {
      closeAllLists(e.target);
  });
  }


  const changeStepProgressBar = () => {
    let step_number
    document.querySelectorAll(".step").forEach( (el) => {
      if (el.style.display != "none") {
        id = el.id;
        step_number = id.substr(id.length - 1);
        document.querySelector("#step_count").innerText = step_number
      }
    })
    let i = 1
    document.querySelectorAll(".boxItem").forEach( (el) => {
      el.classList.remove("step-active");
      el.classList.remove("step-done");
      if (i < step_number) {
        el.classList.add("step-done");
      } else if (i == step_number) {
        el.classList.add("step-active");
      }
      i+= 1;
    })
  }

  const showStep = (id) => {
    document.querySelectorAll(".step").forEach((el) => {
      el.style.display = "none";
    })
    document.querySelector(`#step_${parseInt(id)}`).style.display = "block";
    document.body.scrollTop = 0;
    document.documentElement.scrollTop = 0;
  }

  document.querySelectorAll(".button-next").forEach( (el) => {
    el.addEventListener("click", (ev) => {
      let id = ev.target.id;
      showStep(parseInt(id.substr(id.length - 1))+1);
      changeStepProgressBar();
    })
  })

  document.querySelectorAll(".button-back").forEach( (el) => {
    el.addEventListener("click", (ev) => {
      let id = ev.target.id;
      showStep(parseInt(id.substr(id.length - 1))-1);
      changeStepProgressBar();
    })
  })

  const getNumberOfRooms = (surface) => {
    let array = [];
    if (surface <= 50) {
      array = [2,1,1,1]
    }
    else if (surface <= 90) {
      array = [4,2,1,1]
    }
    else if (surface <= 130) {
      array = [6,3,2,1]
    }
    else {
     array = [6,3,2,2]
    }
    return array;
  }

  const populateForm = (array) => {
    document.querySelector("#house_nb_rooms").value = array[0];
    document.querySelector("#house_nb_bedrooms").value = array[1];
    document.querySelector("#house_nb_livingrooms").value = array[2];
    document.querySelector("#house_nb_diningrooms").value = array[3];
  }

  document.querySelector("#house_surface_living").addEventListener("blur", (ev) => {
    value = ev.target.value
    populateForm(getNumberOfRooms(value));
  })

  autocomplete(document.getElementById("house_owner_last_name"), lastNamesOwners);

</script>
